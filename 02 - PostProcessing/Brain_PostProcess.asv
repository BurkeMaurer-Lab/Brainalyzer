%Brain_PostProcess
%This function takes the data previously collected in the pre-process step
%and performs operations on them. Currently, the biggest functionality is
%to implement spike sorting. 

function Brain_PostProcess(dataDir, blockID)

    %Open file where notes and data are stored
    delim_dash = strsplit(blockID, '-');
    blockDir = [dataDir, delim_dash{2}, '-', delim_dash{3}, '\'];
    
    %Get wave information
    notesDir = [blockDir, 'Notes.txt'];
    if ~exist(notesDir, 'file')
        cprintf('*err', 'ERROR:\n');
        cprintf('err', 'No text file found in block directory\n');
        return;
    else
        try
            wavesBlock = Brain_parseText(notesDir, 'ver', 'Brain', 'voi', 'waveInfo');
%             timeVector = Brain_parseText(notesDir, 'ver', 'Brain', 'voi', 'epochTimes');
        catch
            cprintf('*err', '\n\nERROR READING NOTES FILE. NOT ANALYZING BLOCK\n');
            pause(3);
            return;
        end
    end
    numWaves = size(wavesBlock.wave, 2);
    
    %Iterate through waves
    for waveIdx = 1:numWaves
        curWave = wavesBlock.wave(waveIdx);
        if strcmp(curWave.Sort, 'Yes')
            Brain_SpikeSorter(dataDir, curWave);
        end
    end
    fprintf('\n')
end


function Brain_SpikeSorter(dataDir, wave)

    spikeDir = [dataDir, '02 - Spike Sorting\', char({wave.waveID}), '\'];
    if ~exist(spikeDir, 'dir')
        cprintf('*err', '\n\nERROR!! NO SPIKE DATA AVAILABLE.\nNOT SPIKE SORTING BLOCK\n');
        pause(3);
        return;
    end
    
    homeSplit = strsplit(which('Brainalyzer_Start'), 'Brainalyzer_Start');
    homeDir = [homeSplit{1}, '\00 - Interface\Constants\'];
    temp = load([homeDir, wave.Probe, '.mat']);
    probe = temp.(wave.Map);
    nChan = probe.NChan;
    clear temp;
    
    for shankIdx = 1:probe.ShankCount
    
    %%%Step 1: Create our geometry file for klusta. The file format
    %is .prb and we do it by calling the function
    %Brain_CreateGeomFile which conveniently also returns the
    %number of channels in the probe for future steps
    number_of_live_channels = Brain_CreateGeomFile([char(spikeDir) '\' char(outputName)], wave.BadChs, wave.Probe, wave.Map, shankIdx);

    %%%Step 2: Create our parameter file for klusta. The file
    %%%format is .prm and we do it by calling the function
    %%%prmGenerator 
    low_bandpass = 600;     %hard coded for beta version
    high_bandpass = 0.25;   %hard coded for beta version
    low_threshold = 2;      %hard coded for beta version
    high_threshold = 4.5;   %hard coded for beta version 
    prmGenerator([char(spikeDir) '\' char(outputName)], outputName, numSites, fs, low_bandpass, high_bandpass, low_threshold, high_threshold);

    %%%Step 3: Run automatic klustering with klusta. We already
    %have the .prm, the .prb and the .dat files so we are ready
    %to run klusta.
    dos(['activate klusta && ' spikeDir(1) ': && cd / && cd ' char(spikeDir) '\' char(outputName) '&& klusta param.prm --overwrite'], '-echo');

    %%%Step 4: Create the XML file necessary for manual clustering.
    xmlGenerator([char(spikeDir) '\' char(outputName)], outputName, number_of_live_channels, fs)

    %%%Step 5: Convert Klusta output to kluster input for manual
    %%%clustering with kluster. This is done with the function
    %%%ClusteringKlusta2Neurosuite
    ConvertKlusta2Neurosuite([char(spikeDir) char(outputName)], outputName);

    % Step 6: Delete unnecessary files such as the .prm file, the
    % .prb file, the .klustakwik2 firectory, the .spikedetekt
    % directory, the kwik file and the kwx file.
    %The following code has been commented out for testing
    %purposes:
%             fclose('all');
%             %Delete .klustakwik2
%             if exist([char(outDir) '\' char(outputName) '\.klustakwik2'],'file') ~= 0
%                 rmdir([char(outDir) '\' char(outputName) '\.klustakwik2'], 's');
%             end
%             %Delete .spikedetekt
%             if exist([char(outDir) '\' char(outputName) '\.spikedetekt'],'file') ~= 0
%                 rmdir([char(outDir) '\' char(outputName) '\.spikedetekt'], 's');
%             end
%             %Delete param.prm
%             if exist([char(outDir) '\' char(outputName) '\param.prm'],'file') ~= 0
%                 delete([char(outDir) '\' char(outputName) '\param.prm']);
%             end
%             %Delete geom.prb 
%             if exist([char(outDir) '\' char(outputName) '\geom.prb'],'file') ~= 0
%                 delete([char(outDir) '\' char(outputName) '\geom.prb']);
%             end
%             %Delete kwik file
%             if exist([char(outDir) '\' char(outputName) '\' char(outputName)  '.kwik'],'file') ~= 0
%                 delete([char(outDir) '\' char(outputName) '\' char(outputName) '.kwik']);
%             end
%             %Delete kwx file 
%             if exist([char(outDir) '\' char(outputName) '\' char(outputName)  '.kwx'],'file') ~= 0
%                 delete([char(outDir) '\' char(outputName) '\' char(outputName)  '.kwx']);
%             end

    %%% IAGO FINISHES WRITING HIS SPIKE SORTING STUFF IN HERE       

    fprintf('\n')
end
